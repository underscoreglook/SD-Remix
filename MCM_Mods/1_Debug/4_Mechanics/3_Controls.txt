Debug Menu: Mechanics > Controls > Tap Jumps Submenu
The functions, strings, and data for the submenu "Mechanics > Controls > Tap Jumps".
[_glook]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<tblDbgMechanicsControlsTapJumpsSubMenu> NTSC 1.02
# Entry 1: Player 1
    00000002                                        # String Table
    00000000
    .long <<strPlayer1Opt>>                         # Label
    .long <<arrEnabledDisabled>>                    # Options
    .long <<arrP1TapJumpEnabled>>                   # Variable
    00000000                                        # n/a
    40000000                                        # 2 item table
    00000000                                        # n/a
# Entry 2: Player 2
    00000002                                        # String Table
    00000000
    .long <<strPlayer2Opt>>                         # Label
    .long <<arrEnabledDisabled>>                    # Options
    .long <<arrP2TapJumpEnabled>>                   # Variable
    00000000                                        # n/a
    40000000                                        # 2 item table
    00000000                                        # n/a
# Entry 3: Player 3
    00000002                                        # String Table
    00000000
    .long <<strPlayer3Opt>>                         # Label
    .long <<arrEnabledDisabled>>                    # Options
    .long <<arrP3TapJumpEnabled>>                   # Variable
    00000000                                        # n/a
    40000000                                        # 2 item table
    00000000                                        # n/a
# Entry 4: Player 4
    00000002                                        # String Table
    00000000
    .long <<strPlayer4Opt>>                         # Label
    .long <<arrEnabledDisabled>>                    # Options
    .long <<arrP4TapJumpEnabled>>                   # Variable
    00000000                                        # n/a
    40000000                                        # 2 item table
    00000000                                        # n/a
# END OF LIST
    00000009 00000000 00000000 00000000 00000000 00000000 00000000 00000000


	-==-


Enable or disable tap jumps for player ports
<<arrTapJumpEnabled>> has all of the tap jump states
<https://smashboards.com/threads/melee-gecko-codes-guide-and-discussion.327311/post-20654480>
[flieskiller, Achilles1515]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<arrP1TapJumpEnabled> ALL
00000001

<arrP2TapJumpEnabled> ALL
00000001

<arrP3TapJumpEnabled> ALL
00000001

<arrP4TapJumpEnabled> ALL
00000001

<funTapJumpFromAir> NTSC 1.02
lbz r16, 0x0678 (r24) #r16 = player ID
cmpwi r16, 1
blt PLAYER1
beq PLAYER2
cmpwi r16, 2
beq PLAYER3
b PLAYER4
PLAYER1:
lis r16, <<arrP1TapJumpEnabled>>@h
ori r16, r16, <<arrP1TapJumpEnabled>>@l
b CHECK_TAP_JUMP_SETTING
PLAYER2:
lis r16, <<arrP2TapJumpEnabled>>@h
ori r16, r16, <<arrP2TapJumpEnabled>>@l
b CHECK_TAP_JUMP_SETTING
PLAYER3:
lis r16, <<arrP3TapJumpEnabled>>@h
ori r16, r16, <<arrP3TapJumpEnabled>>@l
b CHECK_TAP_JUMP_SETTING
PLAYER4:
lis r16, <<arrP4TapJumpEnabled>>@h
ori r16, r16, <<arrP4TapJumpEnabled>>@l
CHECK_TAP_JUMP_SETTING:
lwz r16, 0(r16)
cmpwi r16, 1
beq TAPJUMPON
lbz r15, 0x06BE (r29)
cmpwi r15, 4 #check if the jump is from control stick or X/Y
bge TAPJUMPON
b 0x800cba9c
TAPJUMPON:
lwz r0, 0x0004(r30) # normal line
b 0x800CBA34
1.02 ----- 0x800CBA30 --- 801E0004 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funTapJumpFromAir>
801E0004    # Code at injection point
00000000    # Branch Back

<funTapJumpFromGround> NTSC 1.02
lbz r16, 0x0678 (r24) #r16 = player ID
cmpwi r16, 1
blt PLAYER1
beq PLAYER2
cmpwi r16, 2
beq PLAYER3
b PLAYER4
PLAYER1:
lis r16, <<arrP1TapJumpEnabled>>@h
ori r16, r16, <<arrP1TapJumpEnabled>>@l
b CHECK_TAP_JUMP_SETTING
PLAYER2:
lis r16, <<arrP2TapJumpEnabled>>@h
ori r16, r16, <<arrP2TapJumpEnabled>>@l
b CHECK_TAP_JUMP_SETTING
PLAYER3:
lis r16, <<arrP3TapJumpEnabled>>@h
ori r16, r16, <<arrP3TapJumpEnabled>>@l
b CHECK_TAP_JUMP_SETTING
PLAYER4:
lis r16, <<arrP4TapJumpEnabled>>@h
ori r16, r16, <<arrP4TapJumpEnabled>>@l
CHECK_TAP_JUMP_SETTING:
lwz r16, 0(r16)
cmpwi r16, 1
beq TAPJUMPON
cmpwi r4,1 #check if the jump is from control stick or X/Y
bne TAPJUMPON
blr #don't execute the function
TAPJUMPON:
mflr 0 # normal line
b 0x800CB4E4
1.02 ----- 0x800CB4E0 --- 7C0802A6 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funTapJumpFromGround>
7C0802A6    # Code at injection point
00000000    # Branch Back


	-==-


Interrupt_AS_Run Includes Interrupt_USmash (integrated)
Normal: You can upsmash from run if you jump then upsmash, can't use cstick for this
This code: Cstick will do a jump cancelled up smash
<https://smashboards.com/threads/c-stick-up-smash-during-run.415771/>
[Achilles]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<varUsmashDuringRunEnabled> ALL
00000000

<funUsmashDuringRun> NTSC 1.02
3C608008 6063C830 7C6803A6 7FC3F378
4E800021 2C030000 3C60800C 6063A944
7C6903A6 41820008 4E800420
7FC3F378    # Code at hook location
b 0x800CA88C
NTSC 1.02 ---- 0x800CA888 ----- 7FC3F378 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
bge <funUsmashDuringRun>
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varUsmashDuringRunEnabled>>@h
ori r11, r11, <<varUsmashDuringRunEnabled>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funUsmashDuringRun>
            # NORMAL:
7FC3F378    # Code at injection point
00000000    # branch back


	-==-


Extended SH Jump Input Release Window
Jump height is determined on the first aerial frame of grounded jump like in Project M.
So if you perform a grounded jump with fox, releasing jump input by frame 4 is sufficient to short hop, instead of having to release the button by frame 3.
Otherwise jump physics still work like in melee, and control stick influence to horizontal speed still depends on the input received for the last frame of jumpsquat
<https://smashboards.com/threads/extended-short-hop-jump-input-release-window.450652/>
[tauKhan]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<varEnableExtendedShorthopWindow>
00000000

NTSC 1.02 ---- 0x800CB2CC ----- 4BFFFE45 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
40800028    # bge EXTENDED_SHORTHOP_WINDOW
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varEnableExtendedShorthopWindow>>@h
ori r11, r11, <<varEnableExtendedShorthopWindow>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
4182000C    # beq EXTENDED_SHORTHOP_WINDOW
            # NORMAL:
bl 0x800CB110    # Code at injection point
48000008    # b RETURN
            # EXTENDED_SHORTHOP_WINDOW
60000000    # Do the new thing
            # RETURN:
00000000    # branch back

NTSC 1.02 ---- 0x800CB168 ----- C03F0620 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
40800028    # bge EXTENDED_SHORTHOP_WINDOW
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varEnableExtendedShorthopWindow>>@h
ori r11, r11, <<varEnableExtendedShorthopWindow>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
4182000C    # beq EXTENDED_SHORTHOP_WINDOW
            # NORMAL:
C03F0620    # Code at injection point
48000008    # b RETURN
            # EXTENDED_SHORTHOP_WINDOW
C03F0628    # Do the new thing
            # RETURN:
00000000    # branch back

NTSC 1.02 ---- 0x800CB1F8 ----- 981F0671 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
40800028    # bge EXTENDED_SHORTHOP_WINDOW
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varEnableExtendedShorthopWindow>>@h
ori r11, r11, <<varEnableExtendedShorthopWindow>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
4182000C    # beq EXTENDED_SHORTHOP_WINDOW
            # NORMAL:
981F0671    # Code at injection point
48000008    # b RETURN
            # EXTENDED_SHORTHOP_WINDOW
98010028    # Do the new thing
            # RETURN:
00000000    # branch back

<funExtendedShorthopWindow> NTSC 1.02
83E3002C A09F03E8 2C040000 40820068
7FE4FB78 3D80800C 618CB640 9421FFE0
93E1001C 48000014 7FE802A6 93E10024
7D8803A6 4E800020 4BFFFFF1 807F0000
3821FFF8 C02294DC 38800001 3D80800C
618CB110 7D8903A6 4E800421 38210008
889F0671 2C040000 4182000C 8881FFF8
989F0671 7FC3F378
b 0x800CB350
NTSC 1.02 ---- 0x800CB34C ----- 83E3002C -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
bge <funExtendedShorthopWindow>
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varEnableExtendedShorthopWindow>>@h
ori r11, r11, <<varEnableExtendedShorthopWindow>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funExtendedShorthopWindow>
            # NORMAL:
83E3002C    # Code at injection point
00000000    # branch back


	-==-


Short Hop Button
Has dedicated button for short hop and full hop
<https://smashboards.com/threads/seperate-short-and-long-hop-buttons.447835/>
[UnclePunch]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<varShortHopButton> ALL
00000000    # 0 = Disabled, 1 = X, 2 = Y

<funShortHopButtonCommon> NTSC 1.02
83F8002C 801F0668 901F2354 8001000C
b 0x800CB51C
NTSC 1.02 ---- 0x800CB518 ----- 8001000C -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varShortHopButton>>@h
ori r11, r11, <<varShortHopButton>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
bge <funShortHopButtonCommon>
            # NORMAL:
8001000C    # Code at injection point
00000000    # branch back

<funShortHopIsX> NTSC 1.02
81DF2354 55C0056B 40820010 55C00529
40820010 48000014 38000001 48000010
38000000 48000008 801F2340
b 0x800CB174
<funShortHopIsY> NTSC 1.02
81DF2354 55C0056B 40820010 55C00529
40820010 48000014 38000000 48000010
38000001 48000008 801F2340
b 0x800CB174
NTSC 1.02 ---- 0x800CB170 ----- 801F2340 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
40820020    # bne NORMAL
lis r11, <<varShortHopButton>>@h
ori r11, r11, <<varShortHopButton>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funShortHopIsX>
2C0B0002    # cmpwi r11, 2
beq <funShortHopIsY>
            # NORMAL:
801F2340    # Code at injection point
00000000    # branch back


	-==-


Charge Smash Attacks with C-Stick
<https://smashboards.com/threads/charge-smash-attacks-with-c-stick.447579/>
[UnclePunch]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<varChargeWithCStick> ALL
00000000

<funChargeWithCStickPart1> NTSC 1.02
89DF065D 2C0E000F 41800014 3DC0800D
61CEF114 7DC903A6 4E800420 801F065C
b 0x800DF10C
NTSC 1.02 ---- 0x800DF108 ----- 801F065C -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
bge <funChargeWithCStickPart1>
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varChargeWithCStick>>@h
ori r11, r11, <<varChargeWithCStick>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funChargeWithCStickPart1>
            # NORMAL:
801F065C    # Code at injection point
00000000    # branch back

<funChargeWithCStickPart2> NTSC 1.02
89DF065D 2C0E000F 41800014 3DC0800D
61CEF1B0 7DC903A6 4E800420 801F065C
b 0x800DF180
NTSC 1.02 ---- 0x800DF17C ----- 801F065C -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
bge <funChargeWithCStickPart2>
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varChargeWithCStick>>@h
ori r11, r11, <<varChargeWithCStick>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funChargeWithCStickPart2>
            # NORMAL:
801F065C    # Code at injection point
00000000    # branch back


	-==-


Press down on D-Pad to Shield Drop
<https://smashboards.com/threads/various-shield-drop-codes.447375/>
[UnclePunch]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<varShieldDropWithDpad> ALL
00000000

<funShieldDropWithDpad> NTSC 1.02
89DF066B 2C0E0004 40820018 7FC3F378
3DC08009 61CEA228 7DC903A6 4E800420 7C0802A6
b 0x8009A084
NTSC 1.02 ---- 0x8009A080 ----- 7C0802A6 -> Branch
lis r11, <<varOptionsPreset>>@h
ori r11, r11, <<varOptionsPreset>>@l
816B0000    # lwz r11, 0(r11)
2C0B0004    # cmpwi r11, 4
beq <funShieldDropWithDpad>
2C0B0001    # cmpwi r11, 1
40820018    # bne NORMAL
lis r11, <<varShieldDropWithDpad>>@h
ori r11, r11, <<varShieldDropWithDpad>>@l
816B0000    # lwz r11, 0(r11)
2C0B0001    # cmpwi r11, 1
beq <funShieldDropWithDpad>
            # NORMAL:
7C0802A6    # Code at injection point
00000000    # branch back


