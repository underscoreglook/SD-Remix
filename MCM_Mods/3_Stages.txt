SDR Default random omega stages
Melee Code Manager doesn't have any settings for this, so it won't complain
[n/a]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 ---- 0x3D1A7C ------ 00000000 -> FF788000


	-==-


Hold L+R+A+Start During Stage Load to Return to the CSS
In vanilla Melee, this button combination loads the Main Menu.
[Jorgasms]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
1.02 ----- 0x8025b8bc --- 38600001 -> 38600002


	-==-


Stage Striking (Transparent Struck Stages), Method 1, compatible with Alpha/Omega toggle
Works like it does in PM.

X = ban currently selected stage
Y = ban all stages that aren't allowed in random, and unban all that are allowed
Z = unban all

Banned stages can't be selected anymore, however they can still be selected when someone chooses "Random".

Changed to make it compatible with Alpha/Omega toggle.
<https://smashboards.com/threads/stage-striking-invisible-struck-stages.422589/post-20401006>
[Sham Rock, Achilles]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 --- 0x8025A3BC ---- C022C9E8 -> Branch
39E00001 3E008046 6210B0FC 1E2F000C 7E31802E 5630014B 4182000C 3A200001
48000020 56300109 4182000C 3A200002 48000010 563002D7 418200FC 3A200003
3EA0803F 62B506D0 3EC0804D 62D66CAE 3A800000 3A600000 3A400000 2C110001
40820014 8A560000 2C12001C 418100C8 4800006C 2C110003 40820010 3A80003F
3A600002 48000058 1E12001C 7E10AA14 8AF0000A
lis r16, <<varIsAlphaOrOmega>>@h
ori r16,r16, <<varIsAlphaOrOmega>>@l
82100000 2C100000 3E008045 4182000C 6210C38C 48000008 6210C388 82100000
7E10BC30 561007FF 41820010 3A600002 3A80003F 4800000C 3A600000 3A800000
1E12001C 7E10A82E 3AE00000 2C130002 4082001C 3EE00008 62F70008 2C120016
4180000C 3EE02000 62F70008 92F00014 1E12001C 3A100008 7E70A9AE 3A00001E
9A160000 2C110001 41820010 3A520001 2C12001D 41A0FF44 39EF0001 2C0F0005
41A0FEC8 C022C9E8 C022C9E8 00000000


	-==-


Dynamic Lagless Fountain of Dreams
Uses the lagless FoD code but only enables it if there are enough players to lag (4 players)
[Achilles, Myougi, Dan Salvato, _glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
<varLaglessFodEnabled> ALL  # 0 if we only have 2 players or 1 if we have 3 or more players
00000000

NTSC 1.02 ---- 0x25B56C ---- 981B0000 -> Branch
# This counts the number of players and toggles the variable on or off
981B0000    # stb r0, 0(r27)        # The code at hook point
38800DE4    # li r4, 0xDE4
3C84803F    # subis r4, r4, 32705   # r4 = 803F0DE4
38C00E74    # li r6, 0xE74
3CC6803F    # subis r6, r6, 32705   # r6 = 803F0E74
            # NEXT_SLOT:
38840024    # addi r4, r4, 0x24
8A640000    # lbz r19, 0(r4)
2D130003    # cmpwi cr2, r19, 0x3
41AA0014    # beq+ cr2, NORMAL
7D062000    # cmpw cr2, r6, r4
40AAFFEC    # bne- cr2, NEXT_SLOT
            # LAGLESS:
38C00001    # li r6, 0x1
48000008    # b END
            # NORMAL:
38C00000    # li r6, 0x0
            # END:
lis r4, <<varLaglessFodEnabled>>@h
ori r4, r4, <<varLaglessFodEnabled>>@l
90C40000    # stw r6, 0(r4)
00000000    # branch back
NTSC 1.02 ---- 0x801CBB90 ---- 9421FFF8 -> Branch
9421FFF8    # stwu r1, -8(r1)       # Code at hook point
lis r6, <<varLaglessFodEnabled>>@h
ori r6, r6, <<varLaglessFodEnabled>>@l
80C60000    # lwz r6, 0(r6)
2C060000    # cmpwi r6, 0
41820024    # beq RETURN
3CC0804A    # lis r6, 0x804A
80C6ED78    # lwz r6, -0x1288(r6)
3CA00002    # lis r5, 0x2
60A5AE44    # ori r5, r5, 0xAE44
7CA53050    # sub r5, r6, r5
88C50000    # lbz r6, 0(r5)
60C60004    # ori r6, r6, 0x4
98C50000    # stb r6, 0(r5)
            # RETURN:
00000000    # branch back
NTSC 1.02 ---- 0x801CBE98 ---- 38A00000 -> Branch
lis r5, <<varLaglessFodEnabled>>@h
ori r5, r5, <<varLaglessFodEnabled>>@l
80A50000    # lwz r5, 0(r5)
2C050000    # cmpwi r5, 0
41820008    # beq PROCEED_AS_NORMAL
b 0x801CBEA0    # Skip past the function call at 0x801CBE9C
            # PROCEED_AS_NORMAL:
38A00000    # li r5, 0
00000000    # branch back
NTSC 1.02 ---- 0x801CBEF0 ---- 80840030 -> Branch
# Disable Reflections Part 1 (requires part 2)
# original 801CBEF0 -> 60000000
lis r3, <<varLaglessFodEnabled>>@h
ori r3, r3, <<varLaglessFodEnabled>>@l
80630000    # lwz r3, 0(r3)
2C030001    # cmpwi r3, 1
41820008    # beq END
            # ORIGINAL_CODE:
80840030    # lwz r4,0x30(r4)
            # END:
7FC3F378    # mr r3, r30    # Restore r3 to what it was
00000000    # branch back
NTSC 1.02 ---- 0x801CD23C ---- 80A3002C -> Branch
# Disable Reflections Part 2 (requires part 1)
# original 801CD250 -> 60000000
lis r5, <<varLaglessFodEnabled>>@h
ori r5, r5, <<varLaglessFodEnabled>>@l
80A50000    # lwz r5, 0(r5)
2C050000    # cmpwi r5, 0
80A3002C    # lwz r5, 0x2C(r3)
41820008    # beq PROCEED_AS_NORMAL
b 0x801CD254    # Skip the function call
            # PROCEED_AS_NORMAL:
00000000    # branch back
NTSC 1.02 ---- 0x801CBF50 ---- 7FC3F378 -> Branch
# original replacement: 801CBF54 60000000
lis r3, <<varLaglessFodEnabled>>@h
ori r3, r3, <<varLaglessFodEnabled>>@l
80630000    # lwz r3, 0(r3)
2C030000    # cmpwi r3, 0
41820008    # beq PROCEED_AS_NORMAL
b 0x801CBF58
            # PROCEED_AS_NORMAL:
7FC3F378    # mr r3, r30    # Original Code
00000000    # branch back
NTSC 1.02 ---- 0x80390838 ---- 4BFFFE05 -> Branch
# Don't render something on the fountain
# Original Code 80390838 60000000
lis r10, <<varLaglessFodEnabled>>@h
ori r10, r10, <<varLaglessFodEnabled>>@l
814A0000    # lwz r10, 0(r10)
2C0A0001    # cmpwi r10, 1
41820008    # beq END
            # ORIGINAL_CODE:
bl 0x8039063C
            # END:
00000000    # branch back
NTSC 1.02 ---- 0x801CCDCC ---- 387F01D4 -> Branch
# Original Code: 801CCDCC 480000B4
lis r3, <<varLaglessFodEnabled>>@h
ori r3, r3, <<varLaglessFodEnabled>>@l
80630000    # lwz r3, 0(r3)
2C030000    # cmpwi r3, 0
41820008    # beq PROCEED_AS_NORMAL
b 0x801CCE80    # Skip a bunch of code
            # PROCEED_AS_NORMAL:
387F01D4    # addi r3, r31, 0x1D4   # Original Code
00000000    # branch back

	-==-


Disable Trophy Spawn if in versus mode (Snag the Trophies Stage)
[wparam, _glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x802199FC ---- 480D8699 -> Branch
3D808047 618C9D30 898C0000 2C0C0003
40820014 3D80802F 618C2094 7D8903A6
4E800421 00000000


	-==-


Don't infinite loop Snag The Trophies stage in single player mode
Hacky bug fix. Just stops the branches at these locations. No idea what this does.
[_glook]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
NTSC 1.02 ---- 0x216394 ------ 4182FFE0 -> 60000000
-------------- 0x2581B8 ------ 481350C5 -> 60000000


	-==-


Toggle between Alpha/Omega on SSS
If on the Stage Selection Screen, you can press L to switch to the "Alpha" toggle and R to switch to the "Omega" toggle. It then reloads the stage selection screen so the change can be evident.
When switching, it also plays a sound effect unique to reloading the page.
When reloading, it actually loads a different file for the stage select, so the two stage lists can have different graphics, so it's expected that the ISO has the different file. Alpha is MnSlMap.usd, while Omega is MnSlMop.usd.
Provides the (read only) boolean varIsAlphaOrOmega so other stage mods can know if it's alpha or omega.
[_glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
<varIsAlphaOrOmega> ALL         # 0 for alpha, 1 for omega, available for other mods (as read only)
00000001    # Default to omega

<varSssNextScreenId> ALL        # Only used in this mod
00000000

NTSC 1.02 ---- 0x2586DC ------ 540005AD -> Branch
# At this location, it's checking if B is pressed, to leave the SSS. We also want to hook in L/R press.
# If L or R pressed, exit, but the next scene ID should be the SSS instead of the CSS
540305AD # rlwinm. r3,r0,0,22,22    # Check for B press
4182000C # beq CHECK_L              # If 0 (b is unpressed), check for L
38600000 # li r3, 0                 # If b is pressed, set the sound effect
48000058 # b RETURN                 #   and just return
# CHECK_L:
lis r4, <<varIsAlphaOrOmega>>@h
ori r4, r4, <<varIsAlphaOrOmega>>@l
38600005 # li r3, 0x5   # Pew Pew!  # We don't need this here I don't think.
80A40000 # lwz r5, 0(r4)
54030673 # rlwinm. r3,r0,0,25,25    # Check for L press
41820014 # beq CHECK_R              # If not pressed, check R
# If L pressed, check if we're already in Alpha
2C050000 # cmpwi r5, 0x0
41820038 # beq RETURN               # If we're already in alpha, move on
38A00000 # li r5, 0x0               # Otherwise set to Alpha
48000018 # b CHANGE_SSS
# CHECK_R:
540306B5 # rlwinm. r3,r0,0,26,26    # Check for R press
41820028 # beq RETURN               # If R not pressed, just leave
2C050001 # cmpwi r5, 0x1            # If toggle is already on Omega
41820020 # beq RETURN               #   just return
38A00001 # li r5, 0x1               # Otherwise, set to Omega
# CHANGE_SSS:
90A40000 # stw r5, 0(r4)            # r4 == varIsAlphaOrOmega
38600005 # li r3, 0x5               # Set sound effect to lazer sounds for when screen reloads
lis r4, <<varSssNextScreenId>>@h
ori r4, r4, <<varSssNextScreenId>>@l
38A00001 # li r5, 0x1               # Sets next screen ID to 1, which is the Stage Select Screen
90A40000 # stw r5, 0(r4)
# RETURN:
00000000    # Return
-------------- 0x2586F0 ------ 38600000 -> 60000000  # Instead of playing default sound, play whatever we did above
-------------- 0x1AE14C ------ 38A00000 -> Branch
# Normally, this sets r5 to 0, 0 being CSS screen. But if we're reloading, we want it to be 1, for SSS.
# varSssNextScreenId should be set to 1 if reloading (from before), but will be 0 otherwise.
# In addition, once we've loaded this, set varSssNextScreenId to 0, so it will normally load the CSS
lis r6, <<varSssNextScreenId>>@h
ori r6, r6, <<varSssNextScreenId>>@l
80A60000    # lwz r5, 0(r6)
38E00000    # li r7, 0
90E60000    # stw r7, 0(r6)
00000000    # Return
-------------- 0x2575B4 ------ 387F0348 -> Branch
# Lastly, when we load the SSS, we want to load a different SSS file from Alpha or Omega, so it looks different.
387F0348    # addi r3, r31, 0x348   # Do instruction at branch point, which is to have r3 point to filename
lis r4, <<varIsAlphaOrOmega>>@h
ori r4, r4, <<varIsAlphaOrOmega>>@l
80840000    # lwz r4, 0(r4)
2C040000    # cmpwi r4, 0x0         # Is it Alpha?
4082000C    # bne- OMEGA
38800061    # li r4, 0x61
48000008    # b CHANGE_FILENAME
# OMEGA:
3880006F    # li r4, 0x6F
# CHANGE_FILENAME:
98830005    # stb r4, 5(r3)         # filename is normally "MnSlMap.usd". Omega changes it to "MnSlMop.usd".
00000000    # Return


	-==-


Stage loader for Alpha/Omega toggle
When we select a stage, this will take your selection and potentially load something else, based on a table and varIsAlphaOrOmega (requires the Alpha/Omega toggle mod to be on).
Includes a table to change what happens when a stage is selected, based on omega toggle. This can optionally be used to load an alternate stage file, meaning instead of GrXx.dat, it can load GoXx.dat.
Provides the boolean varStageDolChangesEnabled, which lets us know if the stage should be altered based on code changes.
[_glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
<varStageDolChangesEnabled> ALL
00000000

<varShouldLoadAlternateStageFile> ALL   # Only used locally
00000000    # If 0, just loads the normal GrXx.dat file for stage. If 1, loads an alt GoXx.dat file.

<tblStageChanges> ALL
# This is a table of elements that ar 4 bytes long (dword). This controls what happens on alpha/omega toggle.
# The index into the table is (chosen_stage_ID - 2).
# Each dword in an element is the behavior data, for stage loading, for omega stage list.
# bytes 0,1 - Half word, alternate stage id. If 0, we keep normal stage id. If != 0, loads that stage id instead.
# byte 2 - 0 to load normal version (GrXx.dat), 1 to load alt version (GoXx.dat)
# byte 3 - Controls dol stage mod triggers. This value is stored in varStageDolChangesEnabled. 0 is usually "all off".
# Alt  Go Dol  SID  Original Stage                      SDR Stage
  0000 00 01  # 02  Fountain of Dreams (Izumi)          No side platforms FoD
  0005 01 00  # 03  Pokemon Stadium (Pstadium)          Omega Kongo Jungle
  0000 00 01  # 04  Princess Peach's Castle (Castle)    Omega Peach's Castle
  0018 01 00  # 05  Kongo Jungle (Kongo)                Omega Big Blue
  0000 00 01  # 06  Brinstar (Zebes)                    No Acid Brinstar
  0000 00 01  # 07  Corneria                            Omega Corneria
  001F 01 00  # 08  Yoshi's Story (Story)               Reverse Battlefield
  0004 01 01  # 09  Onett                               Princess Peach's Flat
  0014 01 01  # 0A  Mute City                           Omega Mushroom Kingdom II
  0013 01 00  # 0B  Rainbow Cruise (RCruise)            Omega Mushroom Kingdom I
  000A 00 01  # 0C  Jungle Japes (Garden)               Omega Mute City
  0000 01 00  # 0D  GreatBay                            High Tide @ Great Bay
  0000 01 00  # 0E  Hyrule Temple (Shrine)              Skyrule
  0002 00 00  # 0F  Brinstar Depths (Kraid)             Fountain of Dreams (normal)
  0000 01 00  # 10  Yoshi's Island (Yoster)             Omega Yoshi's Island
  0000 00 01  # 11  Green Greens (Greens)               Omega Green Greens
  0000 01 00  # 12  Fourside                            Fourside Smashville
  001E 00 01  # 13  Mushroom Kingdom I (Inishie1)       Omega Kongo Jungle 64
  0003 00 00  # 14  Mushroom Kingdom II (Inishie2)      Pokemon Stadium (normal)
  0000 00 00  # 15  Akaneia (Deleted Stage)             <No Change>
  0047 00 00  # 16  Venom                               Warzone Corneria
  001D 01 00  # 17  Poke Floats (Pura)                  Omega Yoshi Island 64
  000C 01 01  # 18  Big Blue                            Cranky's Treehouse
  0053 00 00  # 19  Icicle Mountain (Icemt)             Trophy Tussle
  0000 00 00  # 1A  Icetop                              <No Change>
  0053 01 00  # 1B  Flat Zone                           Mount Olympus
  0000 00 01  # 1C  Dream Land N64 (old ppp)            No Wind Dreamland 64
  0008 00 01  # 1D  Yoshi's Story N64 (old yosh)        No Flyguys Yoshi's Story
  0011 01 00  # 1E  Kongo Jungle N64 (old kong)         Whispy's Battlegrounds
  0000 00 00  # 1F  Battlefield (battle)                <No Change>
  0000 00 01  # 20  Final Destination (last)            No BG Transitions Final Destination
  0000 00 00  # ??  Unknown, maybe padding              <No Change>

NTSC 1.02 ---- 0x258720 ------ 8804000B -> Branch
# Load stage info when coming from SSS
# We can use r4 to r12 without problems
8804000B    # lbz r0, 0xB(r4)   # r0 is the stage id, don't touch it
38800000    # li r4, 0          # Is Go/Gr toggle
38A00000    # li r5, 0          # Is DOL toggle
2C000002    # cmpwi r0, 2
41800050    # blt RETURN
2C000020    # cmpwi r0, 0x20
41810048    # bgt RETURN
# HANDLE_SSS_ID:    # Now we know it's one of the SSS stages
lis r6, <<varIsAlphaOrOmega>>@h
ori r6, r6, <<varIsAlphaOrOmega>>@l
80C60000    # lwz r6, 0(r6)     # Get omega toggle
2C060000    # cmpwi r6, 0
41820034    # beq RETURN        # If alpha, skip (only Omega is changed)
# HANDLE_OMEGA:
7C040378    # mr r4, r0         # Move it to r4
3884FFFE    # subi r4, r4, 2    # Index for the stage table (table starts at ID 2)
5484103A    # slwi r4, r4, 2    # Multiply by 4 to get bytes offset
lis r5, <<tblStageChanges>>@h
ori r5, r5, <<tblStageChanges>>@l
7CA42A14    # add r5, r4, r5    # r5 is now word for stage toggle
A0850000    # lhz r4, 0(r5)     # Get alternate stage id
2C040000    # cmpwi r4, 0
41820008    # beq NO_ALT
7C802378    # mr r0, r4         # If there's an alt stage ID, set it
# NO_ALT:
88850002    # lbz r4, 2(r5)     # Get if we should load Go dats
88A50003    # lbz r5, 3(r5)     # Get if we should do DOL mods
# RETURN:
lis r6, <<varShouldLoadAlternateStageFile>>@h
ori r6, r6, <<varShouldLoadAlternateStageFile>>@l
90860000    # stw r4, 0(r6)     # Store the Go/Gr toggle
lis r6, <<varStageDolChangesEnabled>>@h
ori r6, r6, <<varStageDolChangesEnabled>>@l
90A60000    # stw r5, 0(r6)     # Store the DOL toggle
00000000    # return

NTSC 1.02 ---- 0x8025B87C ------ 7C000774 -> Branch
# Load stage when coming from CSS (if we have stage selection on RANDOM)
# We should otherwise use r5 to r12 without problems
7C000774    # extsb r0, r0      # r0 is stage id, don't touch it
38E00000    # li r7, 0          # Is Go/Gr toggle
38A00000    # li r5, 0          # Is DOL toggle
2C000002    # cmpwi r0, 2
41800050    # blt RETURN
2C000020    # cmpwi r0, 0x20
41810048    # bgt RETURN
# HANDLE_SSS_ID:    # Now we know it's one of the SSS stages
lis r6, <<varIsAlphaOrOmega>>@h
ori r6, r6, <<varIsAlphaOrOmega>>@l
80C60000    # lwz r6, 0(r6)     # Get omega toggle
2C060000    # cmpwi r6, 0
41820034    # beq RETURN        # If alpha, skip (only Omega is changed)
# HANDLE_OMEGA:
7C070378    # mr r7, r0         # Move it to r7
38E7FFFE    # subi r7, r7, 2    # Index for the stage table (table starts at ID 2)
54E7103A    # slwi r7, r7, 2    # Multiply by 4 to get bytes offset
lis r5, <<tblStageChanges>>@h
ori r5, r5, <<tblStageChanges>>@l
7CA72A14    # add r5, r7, r5    # r5 is now word for stage toggle
A0E50000    # lhz r7, 0(r5)     # Get alternate stage id
2C070000    # cmpwi r7, 0
41820008    # beq NO_ALT
7CE03B78    # mr r0, r7         # If there's an alt stage ID, set it
# NO_ALT:
88E50002    # lbz r7, 2(r5)     # Get if we should load Go dats
88A50003    # lbz r5, 3(r5)     # Get if we should do DOL mods
# RETURN:
lis r6, <<varShouldLoadAlternateStageFile>>@h
ori r6, r6, <<varShouldLoadAlternateStageFile>>@l
90E60000    # stw r7, 0(r6)     # Store the Go/Gr toggle
lis r6, <<varStageDolChangesEnabled>>@h
ori r6, r6, <<varStageDolChangesEnabled>>@l
90A60000    # stw r5, 0(r6)     # Store the DOL toggle
00000000    # return

NTSC 1.02 ---- 0x1A0D48 ------ 981F0005 -> Branch
# This resets the toggle variables when going to CSS. This is so that normal stages load normally.
981F0005    # stb r0, 5(r31)    # Carry over instruction at branch location
38000000    # li r0, 0          # r0 is used so reuse it
lis r3, <<varStageDolChangesEnabled>>@h
ori r3, r3, <<varStageDolChangesEnabled>>@l
90030000    # stw r0, 0(r3)     # Reset dol changes toggle
lis r3, <<varShouldLoadAlternateStageFile>>@h
ori r3, r3, <<varShouldLoadAlternateStageFile>>@l
90030000    # stw r0, 0(r3)     # Reset filename change toggle
00000000    # return

NTSC 1.02 ---- 0x1BD2D4 ------ 38000000 -> Branch
# When the stage dat file loads, this changes the filename, if we want it to change.
# r4 HAS to be kept what it is, which is the address of the filename.
# Otherwise, We can use r3, r5, r6, r7, r8, r9, and r10
38000000    # li r0, 0          # Carry over instruction at branch location
lis r3, <<varShouldLoadAlternateStageFile>>@h
ori r3,r3, <<varShouldLoadAlternateStageFile>>@l
80630000    # lwz r3, 0(r3)
2C030000    # cmpwi r3, 0
4082000C    # bne OMEGA
# ALPHA:
38600052    # li r3, 0x52     # The letter 'r'
48000008    # b WRITE_FILENAME
# OMEGA:
3860006F    # li r3, 0x6f     # The letter 'o'
# WRITE_FILENAME:
98640002    # stb r3, 2(r4)
00000000    # return


	-==-


Random Stage Select Settings for Alpha/Omega
Random stage settings are designed for one stage list. If Alpha/Omega are toggled, then the same list will be shared between both.
This code allows for two separate stage lists, one for Alpha, one for Omega.
[_glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
<varRandomStageListToShow> ALL
00000000

<wsrAlphaStages> ALL    # "Alpha Stages"
160E 008A 008A 200A 202F 2033 202B 2024 1A20 1C20 3720 2420 2A20 2820 360F 0000

<wsrOmegaStages> ALL    # "Omega Stages"
160E 008A 008A 2018 2030 2028 202A 2024 1A20 1C20 3720 2420 2A20 2820 360F 0000

<wsrBigBlue> ALL        # u"Big Blue"
160E 008A 008A 200b 202c 202a 1a20 0b20 2f20 3820 28 0F00 00

<wsrReverseBattlefield> ALL # u"Reverse Battlefield"
160E 008A 008A 201b 2028 2039 2028 2035 2036 2028 1a20 0b20 2420 3720 3720 2f20 2820 2920 2c20 2820
2f20 27 0F00 000000

<wsrFodNoSides> ALL     # u"FoD No Sides"
160E 008A 008A 200f 2032 200d 1a20 1720 321a 201c 202c 2027 2028 2036 0F00 0000

<wsrKongoJungle> ALL    # u"Kongo Jungle"
160E 008A 008A 2014 2032 2031 202a 2032 1a20 1320 3820 3120 2a20 2f20 28 0F00 00

<wsrMushroomKingdom2> ALL     # u"Mushroom Kingdom II"
160E 008A 008A 2016 2038 2036 202b 2035 2032 2032 2030 1a20 1420 2c20 3120 2a20 2720 3220 301a 2012 2012 0F00

<wsrPeachesFlat> ALL        # u"Princess Peach's Flat"
160E 008A 008A 2019 2035 202C 2031 2026 2028 2036 2036 1A20 1920 2820 2420 2620 2B20 F320 361A 200F 202F 2024
2037 0F00

<wsrTrophyTussle> ALL        # u"Trophy Tussle"
160E 008A 008A 201d 2035 2032 2033 202b 203c 1a20 1d20 3820 3620 3620 2f20 28 0F00 000000

<wsrKongoJungle64> ALL        # u"Kongo Jungle 64"
160E 008A 008A 2014 2032 2031 202a 2032 1a20 1320 3820 3120 2a20 2f20 281a 2006 2004 0F00

<wsrMushroomKingdomI> ALL    # u"Mushroom Kingdom I"
160E 008A 008A 2016 2038 2036 202b 2035 2032 2032 2030 1a20 1420 2c20 3120 2a20 2720 3220 301a 2012 0F00 0000

<wsrMuteCity> ALL           # u"Mute City"
160E 008A 008A 2016 2038 2037 2028 1a20 0c20 2c20 3720 3c 0F00 000000

<wsrSkyrule> ALL            # u"Skyrule"
160E 008A 008A 201c 202e 203c 2035 2038 202f 2028 0F00 0000

<wsrFoD> ALL                # u"Fountain of Dreams"
160E 008A 008A 200f 2032 2038 2031 2037 2024 202c 2031 1a20 3220 291a 200d 2035 2028 2024 2030 2036 0F00 0000

<wsrWarzoneCorneria> ALL    # u"Warzone Corneria"
160E 008A 008A 2020 2024 2035 203D 2032 2031 2028 1A20 0C20 3220 3520 3120 2820 3520 2C20 24 0F00 00

<wsrYoshisIsland64> ALL     # u"Yoshi Island 64"
160E 008A 008A 2022 2032 2036 202b 202c 1a20 1220 3620 2f20 2420 3120 271a 2006 2004 0F00

<wsrCrankysTreehouse> ALL   # u"Cranky's Treehouse"
160E 008A 008A 200c 2035 2024 2031 202e 203c 20f3 2036 1a20 1d20 3520 2820 2820 2b20 3220 3820 3620 28 0F00 00

<wsrPokemonStadium> ALL     # u"Pokemon Stadium"
160E 008A 008A 2019 2032 202e 2028 2030 2032 2031 1a20 1c20 3720 2420 2720 2c20 3820 30 0F00 000000

<wsrMountOlympus> ALL       # u"Mount Olympus"
160E 008A 008A 2016 2032 2038 2031 2037 1a20 1820 2f20 3c20 3020 3320 3820 36 0F00 000000

<wsrYoshisStory> ALL        # u"Yoshi's Story"
160E 008A 008A 2022 2032 2036 202b 202c 20f3 2036 1a20 1c20 3720 3220 3520 3c 0F00 000000

<wsrWhispysBattlegrounds> ALL        # u"Whispy's Battlegrounds"
160E 008A 008A 2020 202b 202c 2036 2033 203c 20f3 2036 1a20 0b20 2420 3720 3720 2f20 2820 2a20 3520 3220 3820
3120 2720 36 0F00 00

<tblOmegaStagesNames> ALL
# Table, each dword is the address to a "SmashTF-8" string. Index = Slot Num
00000000                            # Col 01, Slot 01: Peach's Castle
.long <<wsrBigBlue>>                # Col 01, Slot 02: Kongo Jungle
00000000                            # Col 01, Slot 03: Great Bay
00000000                            # Col 01, Slot 04: Brinstar
.long <<wsrReverseBattlefield>>     # Col 01, Slot 05: Yoshis Story
.long <<wsrFodNoSides>>             # Col 01, Slot 06: FoD
00000000                            # Col 01, Slot 07: Corneria
.long <<wsrKongoJungle>>            # Col 01, Slot 08: Pokemon Stadium
.long <<wsrMushroomKingdom2>>       # Col 01, Slot 09: Mute City
.long <<wsrPeachesFlat>>            # Col 01, Slot 10: Onett
.long <<wsrKongoJungle64>>          # Col 01, Slot 11: Mushroom Kingdom I
.long <<wsrTrophyTussle>>           # Col 01, Slot 12: Icicle Mountain
00000000                            # Col 01, Slot 13: Battlefield
00000000                            # Col 01, Slot 14: Dream land N64
.long <<wsrWhispysBattlegrounds>>   # Col 01, Slot 15: Kongo Jungle 64
.long <<wsrMushroomKingdomI>>       # Col 02, Slot 01: Rainbow Cruise
.long <<wsrMuteCity>>               # Col 02, Slot 02: Jungle Japes
.long <<wsrSkyrule>>                # Col 02, Slot 03: Hyrule Temple
.long <<wsrFoD>>                    # Col 02, Slot 04: Brinstar Depths
00000000                            # Col 02, Slot 05: Yoshi's Island
00000000                            # Col 02, Slot 06: Green Greens
.long <<wsrWarzoneCorneria>>        # Col 02, Slot 07: Venom
.long <<wsrYoshisIsland64>>         # Col 02, Slot 08: PokeFloats
.long <<wsrCrankysTreehouse>>       # Col 02, Slot 09: Big Blue
00000000                            # Col 02, Slot 10: Fourside
.long <<wsrPokemonStadium>>         # Col 02, Slot 11: Mushroom Kingdom II
.long <<wsrMountOlympus>>           # Col 02, Slot 12: Flatzone
00000000                            # Col 02, Slot 13: Final Destination
.long <<wsrYoshisStory>>            # Col 02, Slot 14: Yoshi's Island 64
00000000                            # Col 02, Slot 15: Empty

NTSC 1.02 ---- 0x2338C8 ------ 38600006 -> Branch
# This changes varRandomStageListToShow, which the other parts use to display/manipulate the right list.
# It defaults to whatever stage list we are on in the SSS. Then, you can hold L or R to switch to the other.
# We can use r3 - 5, as long as we do the instruction at hook point LAST.
3CA0804C    # lis r5, 0x804C
60A520BC    # ori r5, r5, 0x20BC   # 804C20BC, location of controller input
38600000    # li r3, 0
# CHECK_CONTROLLERS:
80850000    # lwz r4, 0(r5)
54840673    # rlwinm. r4, r4, 0, 25, 25
40820038    # bne SET_TO_ALPHA
80850000    # lwz r4, 0(r5)
548406B5    # rlwinm. r4, r4, 0, 26, 26    # Check for R press
40820024    # bne SET_TO_OMEGA
38A50044    # addi r5, r5, 0x44    # Check the next controller
38630001    # addi r3, r3, 1       # Increment player number
2C030004    # cmpwi r3, 0x4
4180FFDC    # blt CHECK_CONTROLLERS  # If player number < 4, then check next controller
lis r3, <<varIsAlphaOrOmega>>@h
ori r3, r3, <<varIsAlphaOrOmega>>@l
80630000    # lwz r3, 0(r3)
48000010    # b END
# SET_TO_OMEGA:
38600001    # li r3, 1
48000008    # b END
# SET_TO_ALPHA:
3C600000    # lis r3, 0
# END:
lis r5, <<varRandomStageListToShow>>@h
ori r5, r5, <<varRandomStageListToShow>>@l
90650000    # stw r3, 0(r5)
38600006    # li r3, 6             # Instruction at hook location
00000000    # Return
-------------- 0x232800 ------ 2C19001D -> Branch
# The place we hook is at the place where the text on random stages is displayed.
# Normally, we check for 0x1D (or 29) items, but we're going to use that last slot to show Alpha/Omega.
# r26 is the data struct for the text to display. The 0x5C part points to the actual text.
2C19001E  # cmpwi r25, 30
40820030  # bne RETURN           # If it's not the last slot, just move on
lis r5, <<varRandomStageListToShow>>@h
ori r5,r5, <<varRandomStageListToShow>>@l
80A50000  # lwz r5, 0(r5)
2C050000  # cmpwi r5, 0
40820010  # bne OMEGA
lis r4, <<wsrAlphaStages>>@h
ori r4, r4, <<wsrAlphaStages>>@l
4800000C  # b SET_TEXT
# OMEGA:
lis r4, <<wsrOmegaStages>>@h
ori r4, r4, <<wsrOmegaStages>>@l
# SET_TEXT:
909A005C  # stw r4, 0x5C(r26)
# RETURN:
2C19001E  # cmpwi r25, 30        # Instead of exiting on 0x1D, exit on 0x1E slots
00000000    # Return
-------------- 0x2337B4 ------ 2C19001D -> 2C19001E # Checks an extra slot for text cleanup, on screen exit
-------------- 0x232714 ------ 3B180001 -> Branch   # 80235B34
# Replace strings in column 1 of the random stage select screen (since some text is different than stage ID)
# r25 is text structure with 0x5C as the text. r24 is the current slot number.
lis r5, <<varRandomStageListToShow>>@h
ori r5,r5, <<varRandomStageListToShow>>@l
80A50000  # lwz r5, 0(r5)
2C050000  # cmpwi r5, 0
41820024  # beq END
lis r5, <<tblOmegaStagesNames>>@h
ori r5, r5, <<tblOmegaStagesNames>>@l
5704103A  # slwi r4, r24, 2   # Multiply b5 4 to get bytes offset
7CA42A14  # add r5, r4, r5    # r5 points to the pointer to text
80A50000  # lwz r5, 0(r5)
2C050000  # cmpwi r5, 0
41820008  # beq END     # If no replacement, then just stop
90B9005C  # stw r5, 0x5C(r25)   # Store the address of the text into the data
# END:
3B180001  # addi r24, r24, 1  # instruction at hook point
00000000  # return
-------------- 0x2327FC ------ 3B390001 -> Branch   # 80235C1C
# Like the previous one, except the second column
# r26 is the text structure with 0x5C as the text. r25 is current slot number.
lis r5, <<varRandomStageListToShow>>@h
ori r5,r5, <<varRandomStageListToShow>>@l
80A50000  # lwz r5, 0(r5)
2C050000  # cmpwi r5, 0
41820024  # beq END
lis r5, <<tblOmegaStagesNames>>@h
ori r5, r5, <<tblOmegaStagesNames>>@l
5724103A  # slwi r4, r25, 2    # Multiply b5 4 to get bytes offset
7CA42A14  # add r5, r4, r5    # r5 points to the pointer to text
80A50000  # lwz r5, 0(r5)
2C050000  # cmpwi r5, 0
41820008  # beq END     # If no replacement, then just stop
90BA005C  # stw r5, 0x5C(r26)
# END:
3B390001  # addi r25, r25, 1   # Instruction at hook point
00000000  # return
-------------- 0x160E4C ----- 80830018 -> Branch
# This hooks into loading random stages from memory card. Make sure the right list is loaded
# The normal place is alpha, but add 0x4 to get the omega data. It seems unused in the memory card.
lis r12, <<varRandomStageListToShow>>@h
ori r12,r12, <<varRandomStageListToShow>>@l
818C0000  # lwz r12, 0(r12)
2C0C0000  # cmpwi r12, 0
4082000C  # bne OMEGA
80830018  # lwz r4, 0x18(r3)
48000008  # b END
# OMEGA:
8083001C  # lwz r4, 0x1C(r3)
# END:
00000000  # return
-------------- 0x160DCC ----- 5480063F -> Branch
# This code (along with the four static overrides below it) saves the random stage list to memory card.
# As above with loading, there's two separate lists, so we need to save the right list to the right place.
# This specific code loads the r12 register so that the static overrides have the right information to save.
lis r12, <<varRandomStageListToShow>>@h
ori r12,r12, <<varRandomStageListToShow>>@l
818C0000  # lwz r12, 0(r12)
2C0C0000  # cmpwi r12, 0
4082000C  # bne OMEGA
39800018  # li r12, 0x18
48000008  # b END
# OMEGA:
3980001C  # li r12, 0x1C
# END:
5480063F  # clrlwi. r0, r4, 24
00000000  # Return
-------------- 0x160DE8 ----- 80A30018 -> 7CA3602E
-------------- 0x160DF8 ----- 90030018 -> 7C03612E
-------------- 0x160E08 ----- 80A30018 -> 7CA3602E
-------------- 0x160E18 ----- 90030018 -> 7C03612E


	-==-


Use alpha/omega random stage lists
Given that there are two random stage lists, one for alpha in the normal spot and one for omega, make random stage selectors use the appropriate one, depending on the current state of the omega/alpha toggle.
The omega list is stored +4 (one dword) after the normal (alpha) list.
Note: There are two code paths: manually selecting a random stage and having it be done with auto (it's a setting).
[_glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x160F80 ----- 80630018 -> Branch
lis r4, <<varIsAlphaOrOmega>>@h
ori r4, r4, <<varIsAlphaOrOmega>>@l
80840000  # lwz r4, 0(r4)
2C040000  # cmpwi r4, 0
4082000C  # bne OMEGA
80630018  # lwz r3, 0x18(r3)
48000008  # b END
# OMEGA:
8063001C  # lwz r3, 0x1C(r3)
# END:
00000000  # return
NTSC 1.02 ---- 0x160FD4 ----- 80830018 -> Branch
lis r4, <<varIsAlphaOrOmega>>@h
ori r4, r4, <<varIsAlphaOrOmega>>@l
80840000  # lwz r4, 0(r4)
2C040000  # cmpwi r4, 0
4082000C  # bne OMEGA
80830018  # lwz r4, 0x18(r3)
48000008  # b END
# OMEGA:
8083001C  # lwz r4, 0x1C(r3)
# END:
00000000  # return


	-==-


Pokemon Stadium - Disable Stage Transformations (SDR Toggleable)
Uses varStageDolChangesEnabled to toggle on or off.
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1CE128 ------ 48003001 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne RETURN
# ALPHA:
3D80801D    # lis r12, 0x801D
618C4548    # ori r12, r12, 0x4548 # Transformation function
7D8903A6    # mtctr r12
4E800421    # bctrl
# RETURN:
00000000    # Return


	-==-


Dreamland N64 - Disable Wind (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x20E024 ------ 4800059C -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne RETURN
# ALPHA:
3D808021    # lis r12, 0x8021
618C19E0    # ori r12, r12, 0x19E0  # Call wind function
7D8903A6    # mtctr r12
4E800420    # bctr
# RETURN:
00000000


	-==-


Yoshi's Story - Disable Shy Guy Spawns (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1DFF28 ------ 480000D1 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne OMEGA
3D80801E    # lis r12, 0x801E
618C3418    # ori r12, r12, 0x3418
7D8903A6    # mtctr r12
4E800421    # bctrl
# OMEGA:
00000000    # return


	-==-


Corneria - Disable Arwing Spawns (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1DA628 ------ 4BFFF3D5 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne RETURN
# ALPHA:
3D80801D    # lis r12, 0x801D
618CCE1C    # ori r12, r12, 0xCE1C
7D8903A6    # mtctr r12
4E800421    # bctrl
# RETURN:
00000000


	-==-


Corneria - Disable Great Fox's Gun (starts out dead) (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1DDF70 ------ 40800018 -> Branch
41800038    # blt RETURN
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
41820014    # beq ALPHA
# OMEGA:
3D80801E    # lis r12, 0x801E
618C17C0    # ori r12, r12, 0x17C0
7D8903A6    # mtctr r12
4E800420    # bctr
# ALPHA:
3D80801E    # lis r12, 0x801E
618C13A8    # ori r12, r12, 0x13A8
7D8903A6    # mtctr r12
4E800420    # bctr
# RETURN:
00000000


	-==-


Brinstar - Disable Acid (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1D65C0 ------ 7C0802A6 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
41820008    # beq RETURN
4E800020    # blr
# RETURN:
7C0802A6    # mflr r0
00000000    # Branch


	-==-


Mute City Disable cars (SDR Toggleable)
[flieskiller]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1ECD68 ------ 480018AD -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne RETURN
# ALPHA:
3D80801F    # lis r12, 0x801F
618C1A34    # ori r12, r12, 0x1A34
7D8903A6    # mtctr r12
4E800421    # bctrl
# RETURN:
00000000    # branch


	-==-


Fountain of Dreams - Remove Side Platforms (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1C9494 ------ 801B0014 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
41820014    # beq ALPHA
# OMEGA:
3D80801C    # lis r12, 0x801C
618CC9F0    # ori r12, r12, 0xC9F0
7D8903A6    # mtctr r12
4E800421    # bctrl
# ALPHA:
801B0014    # lwz r0, 0x14(r27)
# RETURN:
00000000    # branch


	-==-


Fountain of Dreams - Disables the Water Jets (SDR Dol Toggled & Lagless FoD Toggled)
[Zauron, _glook]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x801CC8AC ---- EC0007FA -> Branch
# Enable/Disable water jets
# First, check if dynamic lagless FoD is enabled
lis r12, <<varLaglessFodEnabled>>@h
ori r12, r12, <<varLaglessFodEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0001    # cmpwi r12, 1
41820018    # beq DISABLE_JETS
# Then, check if stage dol changes are enabled
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
4182000C    # beq ENABLE_JETS
# DISABLE_JETS:
FC000028    # fsub f0,f0,f0
48000008    # b RETURN
# ENABLE_JETS:
EC0007FA    # fmadds f0, f0, f31, f0
# RETURN:
00000000    # branch


	-==-


Peach's Castle - Disable Switches and Bullet Bills (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1CA488 ------ 7C0802A6 -> Branch
7C0802A6    # mflr r0
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0x0
41820008    # beq- RETURN
4E800020    # blr
# RETURN:
00000000    # return


	-==-


Green Greens - Disable Whispy Woods (Wind & Apples) (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x2107F0 ------ 7C0802A6 -> Branch
7C0802A6    # mflr r0
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
41820008    # beq BLANK_ALPHA
4E800020    # blr
# BLANK_ALPHA:
00000000    # return


	-==-


Green Greens - Disable Initial Bricks on Green Greens (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x2112CC ------ 4800046D -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne BLANK_OMEGA
3D808021    # lis r12, 0x8021
618C4B58    # ori r12, r12, 0x4B58
7D8903A6    # mtctr r12
4E800421    # bctrl
# BLANK_OMEGA:
00000000    # return


	-==-


Green Greens - Disable Falling Bricks (SDR Toggleable)
[Zauron]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x21369C ------ 4BFFE89D -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12, r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne BLANK_OMEGA
3D808021    # lis r12, 0x8021
618C5358    # ori r12, r12, 0x5358
7D8903A6    # mtctr r12
4E800421    # bctrl
# BLANK_OMEGA:
00000000    # return


	-==-


Jungle Japes No water or klaptraps (SDR Toggleable)
[Achilles]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1FF7AC ------ 480000AD -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne BLANK_OMEGA
3D808020    # lis r12, 0x8020
618C2C78    # ori r12, r12, 0x2C78
7D8903A6    # mtctr r12
4E800421    # bctrl
# BLANK_OMEGA:
00000000    # return
-------------- 0x1FF97C ------ 7C0802A6 -> Branch
7C0802A6    # mflr r0
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
41820008    # beq BLANK_ALPHA
4E800020    # blr
# BLANK_ALPHA:
00000000    # return
-------------- 0x1FF75C ------ 4BFC1E7D -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne BLANK_OMEGA
3D80801C    # lis r12, 0x801C
618C49F8    # ori r12, r12, 0x49F8
7D8903A6    # mtctr r12
4E800421    # bctrl
# BLANK_OMEGA:
00000000    # return


	-==-


Kongo Jungle 64 (past stage) Remove Barrel (SDR Toggleable)
[flieskiller]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x20C0A0 ------ 4800006D -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne RETURN
# ALPHA:
3D808020    # lis r12, 0x8020
618CF52C    # ori r12, r12, 0xF52C
7D8903A6    # mtctr r12
4E800421    # bctrl
# RETURN:
00000000    # return


	-==-


Mushroom Kingdom 2 Disable Pidgit/Birdo (SDR Toggleable)
[flieskiller]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x1F9BD0 ------ 480007B9 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne BLANK_OMEGA
3D80801F    # lis r12, 0x801F
618CD7A8    # ori r12, r12, 0xD7A8
7D8903A6    # mtctr r12
4E800421    # bctrl
# BLANK_OMEGA:
00000000    # Return
-------------- 0x1F9BC8 ------ 480003E5 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne BLANK_OMEGA
3D80801F    # lis r12, 0x801F
618CD3CC    # ori r12, r12, 0xD3CC
7D8903A6    # mtctr r12
4E800421    # bctrl
# BLANK_OMEGA:
00000000    # Return


	-==-


Final Destination - Disable Background Transitions (SDR Toggleable)
[Achilles, Dan Salvato]
Version -- DOL Offset ------ Hex to Replace ---------- ASM Code
NTSC 1.02 ---- 0x2176C4 ------ 48000805 -> Branch
lis r12, <<varStageDolChangesEnabled>>@h
ori r12,r12, <<varStageDolChangesEnabled>>@l
818C0000    # lwz r12, 0(r12)
2C0C0000    # cmpwi r12, 0
40820014    # bne RETURN
# ALPHA:
3D808021    # lis r12, 0x8021
618CB2E8    # ori r12, r12, 0xB2E8
7D8903A6    # mtctr r12
4E800421    # bctrl
# RETURN:
00000000    # Return