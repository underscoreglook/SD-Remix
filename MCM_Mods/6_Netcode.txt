Disable Unranked
Without altering Slippi itself, there's no way for us to use matchmaking to our advantage, as most of the
matchmaking code exists in Slippi dolphin code.
As a result, we'll simply make the option unusable.
[_glook]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<funOnlineSubmenuThinkSDR> NTSC 1.02
7C0802A6 90010004
9421FF50 BE810008
3C60804A 3BA304F0 # 250, FN_OnlineSubmenuThink
38600004 3D808022
618C9624 7D8903A6 # 260
4E800421 907D000C
3BC00000 93DD0008 # 270
546006F7 41820160
38000005 B00DB528 # 280
3BE00001 3B9E0000
9BFD0011 5783063E # 290
3D80801A 618C36A0
7D8903A6 4E800421 # 2A0
7C60F838 7C84F038
7C83F278 7C00F278 # 2B0
7C600379 4182000C
5783063E 48000014 # 2C0
3B9C0001 2C1C0004
4180FFC4 38600000 # 2D0
3D808016 618C77E8
7D8903A6 4E800421 # 2E0
A01D0002 2C000000 # 0 - Ranked
41820030 2C000001 # 2F0, 1 - Unranked
41820024 2C000002 # 2F8
41820040 2C000003
41820040 2C000004
41820054 2C000005
41820054 48000258
38600003 3D808002
618C4030 7D8903A6
4E800421 48000240
38600001 4800004C
38600002 48000044
38600001 3D808002
618C4030 7D8903A6
4E800421 388000B6
48000058 388000B7
48000050 38600001
3D808002 618C4030
7D8903A6 4E800421
388000B8 48000034
986DAFA0 38600001
3D808002 618C4030
7D8903A6 4E800421
38600008 3D808022
618C9860 7D8903A6
4E800421 480001C0
806DAFC4 98830000
38800001 38A00001
3D808000 618C55F0
7D8903A6 4E800421
4800019C 546006B5
418200D0 38600000
3D808002 618C4030
7D8903A6 4E800421
9BDD0011 38600005
38000001 B06DB528
38600003 889D0000
989D0001 981D0000
38000002 B01D0002
3D808022 618CB3A0
7D8903A6 4E800421
3D808039 618C0CD4
7D8903A6 4E800421
806DC17C 3D808039
618C0228 7D8903A6
4E800421 3C60803F
3863B6B0 83830024
281C0000 41820110
38600000 38800001
38A00080 3D808039
618C01F0 7D8903A6
4E800421 389C0000
38A00000 3D808038
618CFD54 7D8903A6
4E800421 808DC19C
8803000D 508026B6
9803000D 480000C8
546007FF 41820060
38600002 3D808002
618C4030 7D8903A6
4E800421 3BE00005
3B9D0002 A07C0000
28030000 41820010
3803FFFF B01C0000
48000008 B3FC0000
38600008 A09C0000
3D808022 618C9938
7D8903A6 4E800421
2C030000 4182FFC8
48000064 546007BD
4182005C 38600002
3D808002 618C4030
7D8903A6 4E800421
3B9D0002 A07C0000
28030005 41820010
38030001 B01C0000
48000008 B3DC0000
38600008 A09C0000
3D808022 618C9938
7D8903A6 4E800421
2C030000 4182FFC8
48000004 3D808000
618C5618 7D8903A6
4E800421 7F6802A6
387B0004 7C6903A6
4E800421 387B0008
7C6903A6 4E800421
BA810008 800100B4
382100B0 7C0803A6
4E800021 803EB57C
430C0000 803EB684
06000000 4E800021
06450646 06470648
0649064A

NTSC 1.02 --- 0x801b1044 ---- 3BA30B90 -> Branch
3BA30B90    # addi r29, r3, 2960    # Code at hook location
# Set think function
3C60803E    # lis r3, 0x803e
6063B760    # ori r3, r3, 0xb760
lis r4, <<funOnlineSubmenuThinkSDR>>@h
ori r4, r4, <<funOnlineSubmenuThinkSDR>>@l
90830000    # stw r4, 0(r3)

# Now we replace the description for it
3C608131    # lis r3, 0x8131
6063A5A4    # ori r3, r3, 0xA5A4
lis r4, <<wsrDisabledUnrankedDescription>>@h
ori r4, r4, <<wsrDisabledUnrankedDescription>>@l
90830000    # stw r4, 0(r3)
00000000    # Branch back


    -==-


Replace Unranked description
Since unranked is disabled, have the description link to the SD Remix chat room.
[_glook]
Revision ---- DOL Offset ---- Hex to Replace ---------- ASM Code -
<wsrDisabledUnrankedDescription> ALL
120C FF4444 0E 00B3
0080 1607 0000 FFEC
0306 0000 0000 18
# First Line (word align this or alter end 0s)
201c200d 201b1a20 31203220 371a2026 20322030 20332024 2037202c 2025202f 202820e7 1a200a20 36202e1a
20292032 20351a20 30202420 37202620 2b202820 361a2024 203720e9
19
03 # Newline
06 00000000 18
# Second Line (word align this or alter end 0s)
202b2037 20372033 203620e9 20f020f0 203a203a 203a20e7 20362030 20242036 202b202f 20242027 20272028
203520e7 20262032 203020f0 20312028 20372033 202f2024 203c20f0 20012000 20022004
19 0f0d00 00 # Extra 2 0s to word align

<wsrPlayUnrankedMatches> ALL
100caaaa aa0e00b3 00b31606 00000000  18201920 2f202420 3c1a2038 20312035
20242031 202e2028 20271a20 30202420  37202620 2b202820 3620e719 0f0d0000

NTSC 1.02 --- 0x803A63A0 ---- 7C03002E -> Branch
7D83002E    # lwzx r12, r3,r0    # Get text location
# Compare the text at r0 with wsrPlayUnrankedMatches
lis r11, <<wsrPlayUnrankedMatches>>@h
ori r11, r11, <<wsrPlayUnrankedMatches>>@l
39400000    # li r10, 0
            # CHECK_SAME_TEXT:
7D2C502E    # lwzx r9, r12, r10
7D0B502E    # lwzx r8, r11, r10
7C084800    # cmpw r8, r9
4082001C    # bne NORMAL_TEXT
394A0004    # addi r10, r10, 0x4
2C0A0040    # cmpwi r10, 0x40
4180FFE8    # blt CHECK_SAME_TEXT
lis r0, <<wsrDisabledUnrankedDescription>>@h
ori r0, r0, <<wsrDisabledUnrankedDescription>>@l
48000008    # b RETURN
            # NORMAL_TEXT:
7D806378    # mr r0, r12  # Set the normal text
            # RETURN:
00000000    # Branch back


    -==-


Slippi compatible Alpha/Omega in Loser SSS
[_glook]
<funGetSlippiCompatibleStageId> NTSC 1.02
lbz r3, 0xB(r3)     # Get the stage ID
# Check if online SSS
lis r4, 0x8048
lwz r4,-0x62D0(r4)  # 80479D30, major/minor scene
rlwinm r4,r4,8,16,31
cmpwi r4, 0x108     # 108 == SCENE_ONLINE_SSS
bne EXIT
# If alpha, add 0x30, if omega add 0x60
lis r4, <<varIsAlphaOrOmega>>@h
ori r4, r4, <<varIsAlphaOrOmega>>@l
lwz r4, 0(r4)       # Get alpha/omega toggle
addi r4, r4, 1
mulli r4, r4, 0x30
add r3, r3, r4
EXIT:
blr                 # Exit from 8025BC08

NTSC 1.02 --- 0x8025BC18 ---- 8863000B -> Branch
# This normally sets the currently selected stage id (from SSS) to r3.
# Instead, use r4-r12 to determine if we're in online SSS if we should send an alternative id
b <funGetSlippiCompatibleStageId>
00000000


    -==-


Stage ID Handler
If stage ID < 0x30, make sure it's frozen
If stage ID < 0x60, make sure Filename is Gr and stage dol toggles = false, subtract by 0x30
If stage ID > 0x60, then use omega toggles
[_glook]

<tblStageFilenameAddresses> ALL
# Each element is a word, first half is stage id and second half is the lower halfword of addr to its filename
# All filename addresses start with 0x803e. Last element is 0.
0011 76C4   # Whispy's Battlegrounds
0012 3D88   # Smashville Fourside
000C 52D4   # Cranky's Treehouse
001D 6500   # Omega Yoshi's Story 64
0004 1198   # Princess Peach's Flat
0014 4bf4   # Omega Mushroom Kingdom II
0005 17f4   # Omega Kongo Jungle
000D 3f60   # High Tide @ Great Bay
000E 5124   # Skyrule
0053 7d28   # Mount olympus
001F 7e2c   # Reverse Battlefield
0013 4944   # Omega Mushroom Kingdom I
0010 51c0   # Omega Yoshi's Island
0018 2d14   # Omega Big Blue
00000000    # END

<funSlippiStageIdHandler> NTSC 1.02
# Stage loader for Slippi Online
# r12 == Dol toggle
# r11 == Stage ID (or 0 if no change)
# r10 == 0 for Gr stage, 1 for Go stage
li r12, 0
li r10, 0
lis r4, 0x8048
lwz r4, -25296(r4)
rlwinm r4, r4, 8, 16, 31
cmpwi r4, 0x208
bne RETURN   # If not "slippi online", then skip this
# Get the stage id in r11, 8048053F
lis r3, 0x8048
ori r3, r3, 0x053F
lbz r11, 0(r3)
cmpwi r11, 0x30
blt RANDOM_STAGE
cmpwi r11, 0x60
blt ALPHA_STAGE
b OMEGA_STAGE
RANDOM_STAGE:
cmpwi r11, 0x08  # Turn Yoshi's Flyguys off
beq RANDOM_DOL_TOGGLE_ON
cmpwi r11, 0x1C  # Turn DL64 Wind off
bne SET_STAGE_DATA
RANDOM_DOL_TOGGLE_ON:
li r12, 1
b SET_STAGE_DATA
ALPHA_STAGE:
subi r11, r11, 0x30
b SET_STAGE_DATA
OMEGA_STAGE:
subi r11, r11, 0x60
lis r4, <<tblStageChanges>>@h
ori r4, r4, <<tblStageChanges>>@l
subi r5, r11, 0x2               # Get index into stage table
slwi r5, r5, 2                  # Multiply by 4 to get bytes offset
add r4, r4, r5                  # r4 is now address of stage change data
lbz r10, 2(r4)                  # Get if we should load Go stage dats
lbz r12, 3(r4)                  # Get if we should do DOL mods
lhz r3, 0(r4)                   # Get alternate stage id
cmpwi r3, 0                     # No alt id, keep normal id
beq SET_STAGE_DATA
mr r11, r3                      # Set id to alt id
SET_STAGE_DATA:
# Dol toggle first
lis r4, <<varStageDolChangesEnabled>>@h
ori r4, r4, <<varStageDolChangesEnabled>>@l
stw r12, 0(r4)
# Store stage ID
lis r3, 0x8048
ori r3, r3, 0x53F   # 0x8048053F == Stage ID
stb r11, 0(r3)
# Set filename to Go or Gr
lis r4, <<tblStageFilenameAddresses>>@h
ori r4, r4, <<tblStageFilenameAddresses>>@l
LOOP_FIND_FILENAME_ADDR:
lhz r5, 0(r4)
cmpwi r5, 0
beq RETURN
cmpw r5, r11
bne NEXT_ELEMENT
lhz r4, 2(r4)
oris r4, r4, 0x803E
cmpwi r10, 0
bne USE_O
li r3, 0x72    # The letter 'r'
b WRITE_LETTER
USE_O:
li r3, 0x6f    # The letter 'o'
WRITE_LETTER:
stb r3, 2(r4)
b RETURN
NEXT_ELEMENT:
addi r4, r4, 4      # Next element
b LOOP_FIND_FILENAME_ADDR
RETURN:
blr

NTSC 1.02 ---- 0x8016E750 ------ 3C808017 -> Branch
bl <funSlippiStageIdHandler>
3C608017    # lis r3, 0x8017    # Restore what was in r3
3C808017    # lis r4, 0x8017    # Code at injection point
00000000    # Branch Back


    -==-


Correct text for stage ids >= 0x30
These are the Loser picked SSS stages
If one of our special stages, 0x30 or higher, change it to a normal stage
[_glook]

<wsrSmashvilleFourside> ALL
160E 008A 008A 201c 2030 2024 2036 202b 2039 202c 202f 202f 2028 1a 200f 2032 2038 2035 2036 202c 2027 2028
0F00 000000

<wsrOmegaYoshisStoryN64> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2022 2032 2036 202b 202c 20f3 2036 1a 201c 2037 2032 2035 203c 1a 2017 2006 2004
0F00 00

<wsrOmegaMushroomKingdomI> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2016 2038 2036 202b 2035 2032 2032 2030 1a 2014 202c 2031 202a 2027 2032 2030 1a 2012
0F00 000000

<wsrOmegaMushroomKingdomII> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2016 2038 2036 202b 2035 2032 2032 2030 1a 2014 202c 2031 202a 2027 2032 2030 1a 2012 2012
0F00 00

<wsrOmegaKongoJungle> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2014 2032 2031 202a 2032 1a 2013 2038 2031 202a 202f 2028
0F00 0000

<wsrOmegaKongoJungleN64> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2014 2032 2031 202a 2032 1a 2013 2038 2031 202a 202f 2028 1a 2017 2006 2004
0F00 000000

<wsrOmegaPeachsCastle> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2019 2028 2024 2026 202b 20f3 2036 1a 200c 2024 2036 2037 202f 2028
0F00 0000

<wsrOmegaBigBlue> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 200b 202c 202a 1a 200b 202f 2038 2028
0F00 0000

<wsrNoLavaBrinstar> ALL
160E 008A 008A
2017 2032 1a 2015 2024 2039 2024 1a 200b 2035 202c 2031 2036 2037 2024 2035
0F00 0000

<wsrOmegaCorneria> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 200c 2032 2035 2031 2028 2035 202c 2024
0F00 00

<wsrOmegaMuteCity> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2016 2038 2037 2028 1a 200c 202c 2037 203c
0F00

<wsrHighTideAtGreatBay> ALL
160E 008A 008A
2011 202c 202a 202b 1a 201d 202c 2027 2028 1a 200a 2037 1a 2010 2035 2028 2024 2037 1a 200b 2024 203c
0F00

<wsrOmegaYoshisIsland> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2022 2032 2036 202b 202c 20f3 2036 1a 2012 2036 202f 2024 2031 2027
0F00 0000

<wsrOmegaGreenGreens> ALL
160E 008A 008A
2018 2030 2028 202a 2024 1a 2010 2035 2028 2028 2031 1a 2010 2035 2028 2028 2031 2036
0F00 0000

<arrOmegaStageSplashScreenNames> ALL
  # Each word is a pointer to the wide string for the stage.
  # If it's less than 0x100, then it is a stage id to be used with normal stage names.
  # The index is omega stage id - 2
  .long <<wsrFodNoSides>>               # 02  No side platforms FoD
  .long <<wsrOmegaKongoJungle>>         # 03  Omega Kongo Jungle
  .long <<wsrOmegaPeachsCastle>>        # 04  Omega Peach's Castle
  .long <<wsrOmegaBigBlue>>             # 05  Omega Big Blue
  .long <<wsrNoLavaBrinstar>>           # 06  No Acid Brinstar
  .long <<wsrOmegaCorneria>>            # 07  Omega Corneria
  .long <<wsrReverseBattlefield>>       # 08  Reverse Battlefield
  .long <<wsrPeachesFlat>>              # 09  Princess Peach's Flat
  .long <<wsrOmegaMushroomKingdomII>>   # 0A  Omega Mushroom Kingdom II
  .long <<wsrOmegaMushroomKingdomI>>    # 0B  Omega Mushroom Kingdom I
  .long <<wsrOmegaMuteCity>>            # 0C  Omega Mute City
  .long <<wsrHighTideAtGreatBay>>       # 0D  High Tide @ Great Bay
  .long <<wsrSkyrule>>                  # 0E  Skyrule
  00000002                              # 0F  Fountain of Dreams (normal)
  .long <<wsrOmegaYoshisIsland>>        # 10  Omega Yoshi's Island
  .long <<wsrOmegaGreenGreens>>         # 11  Omega Green Greens
  .long <<wsrSmashvilleFourside>>       # 12  Fourside Smashville
  .long <<wsrOmegaKongoJungleN64>>      # 13  Omega Kongo Jungle 64
  00000003                              # 14  Pokemon Stadium (normal)
  00000000                              # 15  Invalid
  .long <<wsrWarzoneCorneria>>          # 16  Warzone Corneria
  .long <<wsrOmegaYoshisStoryN64>>      # 17  Omega Yoshi's Story 64
  .long <<wsrCrankysTreehouse>>         # 18  Cranky's Treehouse
  .long <<wsrTrophyTussle>>             # 19  Trophy Tussle
  00000000                              # 1A  Invalid
  .long <<wsrMountOlympus>>             # 1B  Mount Olympus
  0000001C                              # 1C  Dreamland 64
  00000008                              # 1D  Yoshi's Story
  .long <<wsrWhispysBattlegrounds>>     # 1E  Whispy's Battlegrounds
  0000001F                              # 1F  Battlefield
  00000020                              # 20  Final Destination
  00000000                              # ??  Invalid

<funCorrectSlippiOnlineSplashStageName> NTSC 1.02
lis r3,-32696
lwz r3,-25296(r3)
rlwinm r3,r3,8,16,31
cmpwi r3,1032
bne RETURN   # If not "slippi online", then skip this
# Get stage ID
li r3, 0
bl 0x80005610       # FN_LoadMatchState
lhz r6, 358(r3)     # Stage ID
# Also, find the text struct for the stage name
lwz r12, -0x3D28(r13)    # Get text struct start
FIND_TEXT_STRUCT:
lwz r3, 0(r12)
cmpwi r3, 0
bne FOUND_TEXT_STRUCT
lwz r12, 0x50(r12)
b FIND_TEXT_STRUCT
FOUND_TEXT_STRUCT:
cmpwi r6, 0x30
blt RETURN  # Normal stage id, was handled correctly anyway
cmpwi r6, 0x60
blt ALPHA_STAGE
OMEGA_STAGE:
subi r6, r6, 0x60
subi r5, r6, 0x2                # Get index into stage table
slwi r5, r5, 2                  # Multiply by 4 to get bytes offset
lis r4, <<arrOmegaStageSplashScreenNames>>@h
ori r4, r4, <<arrOmegaStageSplashScreenNames>>@l
add r4, r4, r5                  # r4 is now address of element
lwz r6, 0(r4)                   # r6 is now either a stage ID or wsr address
cmplwi r6, 0x100
blt NORMAL_STAGE_NAME           # If less than 0x100 (unsigned), then go to normal stage name selection
b OVERWRITE_TEXT
ALPHA_STAGE:
subi r6, r6, 0x30
NORMAL_STAGE_NAME:
# Assumption, r6 contains real stage id
lis r5, 0x803B
ori r5, r5, 0x7808              # 0x803B7808: Start address of SelectID -> ExtID lookup
li r3, 0                        # Current RSS ID
LOOP_FIND_RANDOM_ID_START:
mulli r4, r3, 2
lhzx r4, r5, r4                 # ExtID at this index
cmpw r4, r6
beq LOOP_FIND_RANDOM_ID_END
addi r3, r3, 1
cmpwi r3, 0x1d # End of the lookup
blt LOOP_FIND_RANDOM_ID_START
li r3, 0 # Default if ext ID not found?
LOOP_FIND_RANDOM_ID_END:
# Given random stage select ID, get the premade text ID
# First, get bytes into the array
lis r4, 0x803e
ori r4, r4, 0xd488
add r4, r4, r3
lbz r4, 0x5C(r4)
slwi r4, r4, 2
# Now, try and emulate what's in Text_CopyPremadeTextDataToStruct
lbz r5, 0x4F(r12)
slwi r5, r5, 2
lis r3, 0x804D
ori r3, r3, 0x1124
add r3, r3, r5
lwz r3, 0(r3)
lwzx r6, r3, r4
OVERWRITE_TEXT:
# Assumption: r6 contains wsr address
stw r6, 0x5C(r12)        # Store string in text struct
RETURN:
b 0x80186ecc

NTSC 1.02 ---- 0x80186ec8 ------ 900DAF68 -> Branch
# Hooked right after splash screen with Slippi Online
900DAF68    # stw r0, -0x5098(r13) | Code at hook point
b <funCorrectSlippiOnlineSplashStageName>
00000000