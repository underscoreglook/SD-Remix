v1.02
@80073338:
mr r3, r27
lbz r31, 0x6C(r3)			# r31 is now the player number
lis r29, 0x8045
ori r29, r29, 0x3084		# r29 = 80453084, the player_block_t, which is E90 bytes big
mulli r31, r31, 0xE90		# r31 is the player_block_t offset
add r31, r29, r31			# r31 now points to the current player block
lwz r4, 0(r31)				# r4 = character ID
lbz r31, 8(r31)				# r31 = slot type
cmpwi r4, 0x13
beq- Is_SHIEK		# if SHIEK, goto Is_SHIEK
cmpwi r4, 0x12
bne+ PROCEED		# if NOT Zelda, goto PROCEED
cmpwi r31, 1
bne+ PROCEED		# if slot type NOT CPU, goto PROCEED
li r4, 0x13			# if CPU, set character id to Sheik
b PROCEED

Is_SHIEK:
cmpwi r31,1
bne+ PROCEED		# If slot type is NOT CPU, goto PROCEED
li r4, 0x12			# if CPU, set character id to Sheik

PROCEED:
lfs f1, 0x894 (r30)	# Seems like the frame number
fctiwz f1, f1		# Convert to integer
stfd f1, 0(r2)		# Store the integer
lwz r5, 4(r2)		# Retrieve that integer
lwz r6, 0x70(r3)	# r6 is likely the animation number
lwz r7, 0x74(r3)	# r7 is likely secondary animation number
ori r7, r7, 0x8000

lis r31, 0x8000
ori r31, r31, 0x1F18	# 80001F18 => FSM List Address - 8 (for loop purposes)

LOOP_START:
lwzu r29, 8(r31)	# Get first word
cmpwi r29,0			# Is it 0?
beq- END			# If 0, then we're at end of FSM List

rlwinm r28, r29, 8, 24, 31		# r28 = first byte, which is character id
cmpwi r28, 0xFF					# Is this value FF?
beq- CHAR_MATCH				# If it is, it applies to all characters, jump to CHAR_MATCH
cmpw r28, r4		# Compare it to character id
beq- CHAR_MATCH		# if equals character id, goto CHAR_MATCH
bgt- END			# If bigger than character id, we're done, since they go in increasing numerical order
b LOOP_START		# if we don't have , go to next item

CHAR_MATCH:
rlwinm r28,r29,16,24,31		# r28 = second byte, start frame number
cmpw r28, r5
bgt- LOOP_START				# if current frame is less than start frame number, go to next item
rlwinm r28, r29, 0, 16, 31	# r28 = second word, animation number
cmpw r28, r6
beq- ANIM_MATCH		# if primary animation matches, go to ANIM_MATCH
cmpw r28, r7
bne+ LOOP_START		# if secondary animation matches (& 0x8000), go to ANIM_MATCH

ANIM_MATCH:
lwz r28, 4(r31)		# Get second word of FSM List entry, the speed up/slow down value
cmpwi r28, -1		# If this is -1, then skip it
beq- END

RUNFUNCTION:
lfs f1, 4(r31)
lis r31, 0x8006
ori r31, r31, 0xf190	# 8006f190, some function
mtlr r31
blrl

END:
lmw r27,20(r1)




PAL
@80073A10:
mr r3, r27
lbz r31, 0x6C(r3)			# r31 is now the player number
lis r29, 0x8044
ori r29, r29, 0x3E24		# r29 = 80443E24, the player_block_t, which is EA0 bytes big
mulli r31, r31, 0xEA0		# r31 is the player_block_t offset
add r31, r29, r31			# r31 now points to the current player block
lwz r4, 0(r31)				# r4 = character ID
lbz r31, 8(r31)				# r31 = slot type
cmpwi r4, 0x13
beq- Is_SHIEK		# if SHIEK, goto Is_SHIEK
cmpwi r4, 0x12
bne+ PROCEED		# if NOT Zelda, goto PROCEED
cmpwi r31, 1
bne+ PROCEED		# if slot type NOT CPU, goto PROCEED
li r4, 0x13			# if CPU, set character id to Sheik
b PROCEED

Is_SHIEK:
cmpwi r31,1
bne+ PROCEED		# If slot type is NOT CPU, goto PROCEED
li r4, 0x12			# if CPU, set character id to Sheik

PROCEED:
lfs f1, 0x894 (r30)	# Seems like the frame number
fctiwz f1, f1		# Convert to integer
stfd f1, 0(r2)		# Store the integer
lwz r5, 4(r2)		# Retrieve that integer
lwz r6, 0x70(r3)	# r6 is likely the animation number
lwz r7, 0x74(r3)	# r7 is likely secondary animation number
ori r7, r7, 0x8000

lis r31, 0x8040
ori r31, r31, 0xBFF0	# 8040BFF0 => FSM List Address - 8 (for loop purposes)

LOOP_START:
lwzu r29, 8(r31)	# Get first word
cmpwi r29,0			# Is it 0?
beq- END			# If 0, then we're at end of FSM List

rlwinm r28, r29, 8, 24, 31		# r28 = first byte, which is character id
cmpwi r28, 0xFF					# Is this value FF?
beq- CHAR_MATCH				# If it is, it applies to all characters, jump to CHAR_MATCH
cmpw r28, r4		# Compare it to character id
beq- CHAR_MATCH		# if equals character id, goto CHAR_MATCH
bgt- END			# If bigger than character id, we're done, since they go in increasing numerical order
b LOOP_START		# if we don't have , go to next item

CHAR_MATCH:
rlwinm r28,r29,16,24,31		# r28 = second byte, start frame number
cmpw r28, r5
bgt- LOOP_START				# if current frame is less than start frame number, go to next item
rlwinm r28, r29, 0, 16, 31	# r28 = second word, animation number
cmpw r28, r6
beq- ANIM_MATCH		# if primary animation matches, go to ANIM_MATCH
cmpw r28, r7
bne+ LOOP_START		# if secondary animation matches (& 0x8000), go to ANIM_MATCH

ANIM_MATCH:
lwz r28, 4(r31)		# Get second word of FSM List entry, the speed up/slow down value
cmpwi r28, -1		# If this is -1, then skip it
beq- END

RUNFUNCTION:
lfs f1, 4(r31)
lis r31, 0x8006
ori r31, r31, 0xF868	# 8006F868, some function
mtlr r31
blrl

END:
lmw r27,20(r1)



r4 = character id = 0x0E (Ice Climbers)

Start of Up+B
r5 = Frame number, counting upwards
r6 = 0x15B, 0x15E, 0x15F which are the three grounded Up+B animation values (347, 350, 351)
r7 = 0x12D, 0x130, 0x131 which are secondary grounded up+B values (301, 304, 305)


8040B9A8 + 8 = SDR 3.2 FSM List location

0E00015E 40000000
0E00015F 40000000

FSM List @ 80001F20: Each entry seems to be 8 bytes, or two words, 0x124 words
00080160 3FC00000 001400EB 3FC00000 01190042 3F800000 01000042 3FA00000 01180045 3FC00000 011800EB 3FD00000
01000181 40000000 03090038 3F800000 03000038 3FC00000 0318003F 3F800000 0301003F FFFFFFFF 0300003F 3FC00000
030A0042 3F800000 03000042 3FA00000 031400E9 3FF00000 031400EA 3FF00000 030C00EB 3FE66666 03260177 41300000
0326017A 41300000 040A0042 3F800000 04000042 3FD55555 04120045 3F800000 04000045 3FE66666 041D00DC 40000000
043900DE 402AAAAB 0416017F 3F800000 0400017F 3FA5A5A6 042E0180 40000000 0400018C 40000000 05160044 3F800000
05000044 3FB00000 052F00DE 3FC00000 051700E9 40124925 051A00EA 40500000 051900EB 40080000 05000157 40000000
0512015B 3F9E1E1E 0510015B 3F800000 0500015B 3FAAAAAB 05120161 3F9E1E1E 05100161 3F800000 05000161 3FAAAAAB
0500016B 3FC00000 05140045 3ECCCCCD 06100035 3F800000 06000035 3FBA2E8C 060D0039 3F800000 06000039 3FE00000
061E0042 3F800000 06100042 3FE00000 061400EA 3FC5D174 061B015E 3F800000 0600015E 3FA2E8BA 061B0161 3F800000
06000161 3FA2E8BA 06000166 3FA66666 06000167 3FA66666 08160042 3FF33333 08120042 3F800000 08000042 3FADB6DB
0A13003C 3FC00000 0A020042 3F800000 0A010042 3E800000 0A0C0043 3F800000 0A000043 3FC00000 0A150045 3FC00000
0A1500EB 402AAAAB 0A000155 3FD9999A 0A00015A 3FD9999A 0A27015F 3FB33333 0A270160 3FB33333 0A0F0167 3F800000
0A000167 3FD55555 0A0F0168 3F800000 0A000168 3FD55555 0B1D0045 3FE00000 0B140045 3F800000 0B000045 40000000
0B0C0159 3F800000 0B000159 3FC00000 0B140164 3FC00000 0B000164 3FB6DB6E 0B140165 3FC00000 0B000165 3FB6DB6E
0B00016F 41200000 0B000174 41200000 0D10003C 3F800000 0D01003C FFFFFFFF 0D00003C 3FAAAAAB 0D0E0045 3F800000
0D000045 3FB33333 0D1400DE 3FB8E38E 0D00016A 3FB851EC 0D00016E 3FB851EC 1016003F 3F4CCCCD 11130042 3F800000
11000042 3FAAAAAB 111800D4 3FC00000 111200D4 3F800000 110000D4 3FD1745D 110C00DD 3FCCCCCD 1100016F 3F99999A
11000159 3F400000 111700D6 3F99999A 11000155 3F400000 120C0033 3F800000 12000033 40000000 120C0035 3F800000
12000035 40000000 120C0037 3F800000 12000037 40000000 12080038 3F800000 12000038 3FEAAAAB 12030162 40000000
150E0039 3F800000 15000039 3FE00000 150A003F 3F800000 1501003F FFFFFFFF 1500003F 40000000 150E0042 3F800000
15000042 40000000 151400EA 3FC5D174 1500015A 3FAAAAAB 1500015D 3FAAAAAB 151B015E 3F800000 1500015E 3FACCCCD
151B0161 3F800000 15000161 3FACCCCD 16160042 3FF33333 170D0045 3F9C71C7 1810003C 3F800000 1801003C FFFFFFFF
1800003C 3FCCCCCD 180A0042 3F800000 18000042 40000000 180E0045 3F800000 18000045 3FE00000 1800016A 3FF8E38E
1800016E 3FF8E38E 180E00DE 3FA00000 191400EB 40000000 19080160 3FC00000 19120038 3ECCCCCD 19030038 3F400000
19010038 3E000000 00000000 00000000


FSM List with Ice Climber's stuff, 4 words more, or 0x10 bytes
00080160 3FC00000 001400EB 3FC00000 01190042 3F800000 01000042 3FA00000 01180045 3FC00000 011800EB 3FD00000
01000181 40000000 03090038 3F800000 03000038 3FC00000 0318003F 3F800000 0301003F FFFFFFFF 0300003F 3FC00000
030A0042 3F800000 03000042 3FA00000 031400E9 3FF00000 031400EA 3FF00000 030C00EB 3FE66666 03260177 41300000
0326017A 41300000 040A0042 3F800000 04000042 3FD55555 04120045 3F800000 04000045 3FE66666 041D00DC 40000000
043900DE 402AAAAB 0416017F 3F800000 0400017F 3FA5A5A6 042E0180 40000000 0400018C 40000000 05160044 3F800000
05000044 3FB00000 052F00DE 3FC00000 051700E9 40124925 051A00EA 40500000 051900EB 40080000 05000157 40000000
0512015B 3F9E1E1E 0510015B 3F800000 0500015B 3FAAAAAB 05120161 3F9E1E1E 05100161 3F800000 05000161 3FAAAAAB
0500016B 3FC00000 05140045 3ECCCCCD 06100035 3F800000 06000035 3FBA2E8C 060D0039 3F800000 06000039 3FE00000
061E0042 3F800000 06100042 3FE00000 061400EA 3FC5D174 061B015E 3F800000 0600015E 3FA2E8BA 061B0161 3F800000
06000161 3FA2E8BA 06000166 3FA66666 06000167 3FA66666 08160042 3FF33333 08120042 3F800000 08000042 3FADB6DB
0A13003C 3FC00000 0A020042 3F800000 0A010042 3E800000 0A0C0043 3F800000 0A000043 3FC00000 0A150045 3FC00000
0A1500EB 402AAAAB 0A000155 3FD9999A 0A00015A 3FD9999A 0A27015F 3FB33333 0A270160 3FB33333 0A0F0167 3F800000
0A000167 3FD55555 0A0F0168 3F800000 0A000168 3FD55555 0B1D0045 3FE00000 0B140045 3F800000 0B000045 40000000
0B0C0159 3F800000 0B000159 3FC00000 0B140164 3FC00000 0B000164 3FB6DB6E 0B140165 3FC00000 0B000165 3FB6DB6E
0B00016F 41200000 0B000174 41200000 0D10003C 3F800000 0D01003C FFFFFFFF 0D00003C 3FAAAAAB 0D0E0045 3F800000
0D000045 3FB33333 0D1400DE 3FB8E38E 0D00016A 3FB851EC 0D00016E 3FB851EC 0E00015E 40000000 0E00015F 40000000 <-- 8 words
1016003F 3F4CCCCD 11130042 3F800000 11000042 3FAAAAAB 111800D4 3FC00000 111200D4 3F800000 110000D4 3FD1745D
110C00DD 3FCCCCCD 1100016F 3F99999A 11000159 3F400000 111700D6 3F99999A 11000155 3F400000 120C0033 3F800000
12000033 40000000 120C0035 3F800000 12000035 40000000 120C0037 3F800000 12000037 40000000 12080038 3F800000
12000038 3FEAAAAB 12030162 40000000 150E0039 3F800000 15000039 3FE00000 150A003F 3F800000 1501003F FFFFFFFF
1500003F 40000000 150E0042 3F800000 15000042 40000000 151400EA 3FC5D174 1500015A 3FAAAAAB 1500015D 3FAAAAAB
151B015E 3F800000 1500015E 3FACCCCD 151B0161 3F800000 15000161 3FACCCCD 16160042 3FF33333 170D0045 3F9C71C7
1810003C 3F800000 1801003C FFFFFFFF 1800003C 3FCCCCCD 180A0042 3F800000 18000042 40000000 180E0045 3F800000
18000045 3FE00000 1800016A 3FF8E38E 1800016E 3FF8E38E 180E00DE 3FA00000 191400EB 40000000 19080160 3FC00000
19120038 3ECCCCCD 19030038 3F400000 19010038 3E000000 00000000 00000000

To enable:
@ 0x2F0 = 0E00015E
@ 0x2F8 = 0E00015F
To disable, 0E000000 in both of them